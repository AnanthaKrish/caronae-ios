fastlane_require 'aws-sdk-kms'

default_platform :ios
google_keys_file = '../Caronae/Supporting Files/GoogleService-Info.plist'

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Submit a new build to TestFlight"
  lane :build do |options|
    decrypt_keys
    install_signing

    cocoapods

    update_build_number
    build_app
    push_to_git_remote unless options[:skip_push]
  end

  desc "Deploy a new build to TestFlight"
  lane :beta do |options|
    build unless options[:ipa]
    pilot(skip_waiting_for_build_processing: true, ipa: options[:ipa])
  end

  desc "Deploy a new version to the App Store"
  lane :deploy do
    build unless options[:ipa]
    deliver(submit_for_review: true, force: true, ipa: options[:ipa])
  end

  desc "Update and install all certificates and provisioning profiles"
  lane :update_signing do
    match(type: "development", force_for_new_devices: true)
    match(type: "appstore")
  end

  desc "Install all certificates and provisioning profiles"
  lane :install_signing do
    match(type: "development", readonly: true)
    match(type: "appstore", readonly: true)
  end

  desc "Encrypt sensitive keys using AWS KMS"
  lane :encrypt_keys do
    kms = Aws::KMS::Client.new()
    decrypted_file = IO.read(google_keys_file)
    encrypted_data = kms.encrypt(key_id: 'alias/caronae-ios-keys', plaintext: decrypted_file)
    encrypted_text = Base64.encode64(encrypted_data.ciphertext_blob)
    IO.write(google_keys_file + '.encrypted', encrypted_text)

    UI.success("Successfully encrypted keys")
  end

  desc "Decrypt sensitive keys using AWS KMS"
  lane :decrypt_keys do
    kms = Aws::KMS::Client.new()
    encrypted_file = IO.read(google_keys_file + '.encrypted')
    encrypted_data = Base64.decode64(encrypted_file)
    decrypted_data = kms.decrypt(ciphertext_blob: encrypted_data)
    IO.write(google_keys_file, decrypted_data.plaintext)

    UI.success("Successfully decrypted keys")
  end

  desc "Update and tag the version/build"
  lane :update_build_number do
    build_number = ENV['CIRCLE_BUILD_NUM'] if ENV['CIRCLECI']

    increment_build_number(build_number: build_number)

    build_number = get_build_number
    version_number = get_version_number
    tag_name = "#{version_number}/#{build_number}"
    add_git_tag(tag: tag_name)

    UI.success("Success! New version: #{tag_name}")
  end

end

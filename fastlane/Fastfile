fastlane_require 'aws-sdk-kms'

default_platform :ios
google_keys_file = '../Caronae/Supporting Files/GoogleService-Info.plist'

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Submit a new build to TestFlight"
  lane :beta do
    ensure_git_status_clean
    decrypt_keys
    install_signing

    cocoapods
    increment_build_number
    commit_build_bump
    build_app
    push_to_git_remote

    pilot(skip_waiting_for_build_processing: true)

    tag(type: "beta")
    push_to_git_remote
  end

  desc "Deploy a new version to the App Store"
  lane :deploy do
    ensure_git_status_clean
    decrypt_keys
    install_signing
    
    cocoapods
    increment_build_number
    commit_build_bump
    build_app
    push_to_git_remote

    deliver(submit_for_review: true, force: true)

    tag(type: "appstore")
    push_to_git_remote
  end

  desc "Update and install all certificates and provisioning profiles"
  lane :update_signing do
    register_devices(devices_file: "./fastlane/devices.txt")
    match(type: "development", force_for_new_devices: true)
    match(type: "appstore")
  end

  desc "Install all certificates and provisioning profiles"
  lane :install_signing do
    match(type: "development", readonly: true)
    match(type: "appstore", readonly: true)
  end

  desc "Encrypt sensitive keys using AWS KMS"
  lane :encrypt_keys do
    kms = Aws::KMS::Client.new()
    decrypted_file = IO.read(google_keys_file)
    encrypted_data = kms.encrypt(key_id: 'alias/caronae-ios-keys', plaintext: decrypted_file)
    encrypted_text = Base64.encode64(encrypted_data.ciphertext_blob)
    IO.write(google_keys_file + '.encrypted', encrypted_text)

    UI.success("Successfully encrypted keys")
  end

  desc "Decrypt sensitive keys using AWS KMS"
  lane :decrypt_keys do
    kms = Aws::KMS::Client.new()
    encrypted_file = IO.read(google_keys_file + '.encrypted')
    encrypted_data = Base64.decode64(encrypted_file)
    decrypted_data = kms.decrypt(ciphertext_blob: encrypted_data)
    IO.write(google_keys_file, decrypted_data.plaintext)

    UI.success("Successfully decrypted keys")
  end

  desc "Commit the version/build number bump"
  lane :commit_build_bump do
    version_number = get_version_number
    build_number = get_build_number

    commit_version_bump(
      message: "Version bump to #{version_number} (#{build_number}) [ci skip]"
    )
  end

  desc "Add tag with the current version and build number"
  lane :tag do |options|
    version_number = get_version_number
    build_number = get_build_number

    if options[:type] == "beta"
      tag = "beta/#{version_number}/#{build_number}"
    elsif options[:type] == "appstore"
      tag = "appstore/#{version_number}/#{build_number}"
    else
      UI.user_error!("Missing option 'type' as 'beta' or 'appstore'")
    end

    add_git_tag(tag: tag)

    UI.success("Success! New tag: '#{tag}'")
  end

  error do |lane, exception|
    reset_git_repo
  end

end
